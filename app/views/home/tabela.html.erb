<div id="tabela-brasileirao" class="bg-white rounded-lg shadow-md p-6 mb-8">
  <%= content_tag :h3, "Classificação do Brasileirão", class: "text-2xl font-bold text-gray-800 mb-6 border-b pb-2" %>
  
  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pos</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">PTS</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">J</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">V</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">E</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">D</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">GP</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">GC</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SG</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">%</th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200" id="tabela-classificacao">
        <tr>
          <td colspan="11" class="px-6 py-4 text-center text-gray-500">Carregando classificação...</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

<div id="tabela-brasileirao" class="bg-white rounded-lg shadow-md p-6 mb-8">
  <!-- ... (mantenha a mesma estrutura HTML anterior) ... -->
</div>

<script>
document.addEventListener('DOMContentLoaded', async function() {
  const tabelaBody = document.getElementById('tabela-classificacao');
  
  // Configurações das APIs
  const API_FUTEBOL_KEY = 'SUA_CHAVE_API_FUTEBOL'; // Substitua pela sua chave
  const FOOTBALL_DATA_KEY = 'SUA_CHAVE_FOOTBALL_DATA'; // Substitua pela sua chave
  
  // 1. Tenta a API API-Futebol (Brasileirão específica)
  async function fetchAPIFutebol() {
    try {
      const response = await fetch('https://api.api-futebol.com.br/v1/campeonatos/10/fases/506', {
        headers: {
          'Authorization': `Bearer ${API_FUTEBOL_KEY}`
        }
      });
      
      if (!response.ok) throw new Error('Erro na API-Futebol');
      
      const data = await response.json();
      return data.chaves[0].classificacao.map((time, index) => ({
        posicao: index + 1,
        nome: time.time.nome_popular,
        pontos: time.pontos,
        jogos: time.jogos,
        vitorias: time.vitorias,
        empates: time.empates,
        derrotas: time.derrotas,
        golsPro: time.gols_pro,
        golsContra: time.gols_contra,
        saldoGols: time.saldo_gols,
        percentual: ((time.pontos / (time.jogos * 3)) * 100).toFixed(1)
      }));
    } catch (error) {
      console.log('Erro na API-Futebol:', error);
      return null;
    }
  }

  // 2. Tenta a API Football-Data (internacional)
  async function fetchFootballData() {
    try {
      const response = await fetch('https://api.football-data.org/v4/competitions/BSA/standings', {
        headers: {
          'X-Auth-Token': FOOTBALL_DATA_KEY
        }
      });
      
      if (!response.ok) throw new Error('Erro na Football-Data');
      
      const data = await response.json();
      return data.standings[0].table.map(time => ({
        posicao: time.position,
        nome: time.team.shortName || time.team.name,
        pontos: time.points,
        jogos: time.playedGames,
        vitorias: time.won,
        empates: time.draw,
        derrotas: time.lost,
        golsPro: time.goalsFor,
        golsContra: time.goalsAgainst,
        saldoGols: time.goalDifference,
        percentual: ((time.points / (time.playedGames * 3)) * 100).toFixed(1)
      }));
    } catch (error) {
      console.log('Erro na Football-Data:', error);
      return null;
    }
  }

  // 3. Fallback para API pública alternativa
  async function fetchAPIFallback() {
    try {
      const response = await fetch('https://api-brasileirao.vercel.app/tabela');
      if (!response.ok) throw new Error('Erro no fallback');
      const data = await response.json();
      return data.map((time, index) => ({
        posicao: index + 1,
        nome: time.nome,
        pontos: time.pontos,
        jogos: time.jogos,
        vitorias: time.vitorias,
        empates: time.empates,
        derrotas: time.derrotas,
        golsPro: time.golsPro,
        golsContra: time.golsContra,
        saldoGols: time.saldoGols,
        percentual: time.percentual
      }));
    } catch (error) {
      console.log('Erro no fallback:', error);
      return null;
    }
  }

  // Carrega e exibe os dados
  async function loadData() {
    tabelaBody.innerHTML = '<tr><td colspan="11" class="px-6 py-4 text-center text-gray-500">Carregando dados atualizados...</td></tr>';
    
    // Tenta primeiro a API-Futebol (sua API brasileira)
    let times = await fetchAPIFutebol();
    
    // Se falhar, tenta a Football-Data
    if (!times || times.length === 0) {
      times = await fetchFootballData();
    }
    
    // Se ambas falharem, tenta o fallback público
    if (!times || times.length === 0) {
      times = await fetchAPIFallback();
    }

    // Se tudo falhar, mostra mensagem de erro
    if (!times || times.length === 0) {
      tabelaBody.innerHTML = `
        <tr>
          <td colspan="11" class="px-6 py-4 text-center text-red-500">
            Não foi possível carregar a tabela. Atualize a página ou tente novamente mais tarde.
          </td>
        </tr>
      `;
      return;
    }

    renderTabela(times);
  }

  // Renderiza a tabela
  function renderTabela(times) {
    tabelaBody.innerHTML = '';
    
    times.forEach(time => {
      const row = document.createElement('tr');
      row.className = time.posicao % 2 === 0 ? 'bg-white' : 'bg-gray-50';
      
      row.innerHTML = `
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${time.posicao}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${time.nome}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-bold text-gray-900">${time.pontos}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time.jogos}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time.vitorias}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time.empates}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time.derrotas}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time.golsPro}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time.golsContra}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time.saldoGols > 0 ? '+' : ''}${time.saldoGols}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time.percentual}</td>
      `;
      
      tabelaBody.appendChild(row);
    });
  }

  loadData();
});
</script>